{"version":3,"sources":["app/mediators/ModuleMediators/CountryDetailMediator/__generated__/CountryDetailMediator_indicatorAggregations.graphql.js","app/mediators/ModuleMediators/CountryDetailMediator/__generated__/CountryDetailMediatorRefetchQuery.graphql.js","app/modules/countrydetail/fragments/CountryInfo/CountryInfo.styles.js","app/components/charts/barcharts/horizontal/HorizontalBarChart.styles.js","app/components/charts/barcharts/horizontal/HorizontalBarChart.jsx","app/__mocks__/countryDetailMock.js","app/modules/countrydetail/fragments/CountryInfo/CountryInfo.jsx","app/modules/countrydetail/fragments/HumanRights.jsx","app/components/charts/barcharts/horizontal_old/BarChartHorizontal.jsx","app/modules/countrydetail/fragments/CivicSpace.jsx","app/components/charts/recharts_linechart/components/TooltipContent/TooltipContent.styles.js","app/components/charts/recharts_linechart/components/TooltipContent/TooltipContent.jsx","app/components/charts/recharts_linechart/LineChart.jsx","app/modules/countrydetail/fragments/AidsEpidemic/AidsEpidemic.jsx","app/components/charts/nivo_linechart/LineChart.styles.js","app/components/charts/nivo_linechart/LineChart.jsx","app/__mocks__/lineChartMock.js","app/modules/countrydetail/fragments/EconomicIndicators.jsx","app/components/charts/piechart/PieChart.jsx","app/__mocks__/pieChartMock.js","app/modules/countrydetail/fragments/AidsfondsTransactions.jsx","app/modules/countrydetail/fragments/PageNavigation.jsx","app/components/Lists/ProjectList/ProjectList.styles.js","app/components/Lists/ProjectList/ProjectList.jsx","app/modules/countrydetail/fragments/Projects/Projects.jsx","app/modules/countrydetail/CountryDetailModule.jsx","app/mediators/ModuleMediators/CountryDetailMediator/CountryDetailMediator.mock.js","app/mediators/ModuleMediators/CountryDetailMediator/CountryDetailMediator.js","app/mediators/ModuleMediators/CountryDetailMediator/CountryDetailMediator.utils.js","app/components/Layout/ModuleFragment/ModuleFragment.style.js","app/components/Layout/ModuleFragment/ModuleFragment.jsx","app/components/sort/Paragraphs.jsx","app/components/sort/Fragments.jsx","app/assets/icons/IconSort.js","app/components/Dialog/SortbyDialog/SortbyDialog.styles.js","app/components/Dialog/SortbyDialog/SortbyDialog.jsx","app/__mocks__/barChartVerticalMock.js"],"names":["node","v0","v1","kind","name","value","type","v2","variableName","v3","v4","v5","alias","args","storageKey","v6","metadata","argumentDefinitions","defaultValue","selections","concreteType","plural","hash","module","exports","operationKind","id","text","fragment","operation","CountryName","styled","Box","withConfig","displayName","componentId","PageHeading","p","BarsContainer","ul","BarContainer","li","BarName","div","Theme","color","smallTextBlack","font","zoomFontFamTwo","Bar","shadow","standard","props","theme","width","Value","LegendContainer","Legend","LegendColor","LegendText","HorizontalBarChart","_ref","data","countryName","react_default","a","createElement","Fragment","map","item","key","indicator","concat","percentage","CountryColor","get","defaultProps","countryDetailMockData","country","fragments","title","description","excerpts","infoBarData","CountryInfo","modules","ModuleFragment","direction","Paragraphs","Misc","aidsFondsRed","horizontal_HorizontalBarChart","ItemText","HumanRights","showInfoButton","ComponentBase","BarChart","bar","keys","indexBy","margin","top","right","bottom","left","padding","innerPadding","groupMode","layout","colors","colorBy","e","defs","background","size","stagger","rotation","lineWidth","spacing","borderColor","axisBottom","enableGridY","axisLeft","renderTick","tick","transform","y","style","opacity","fontSize","fontWeight","enableLabel","labelTextColor","zoomBlack","label","d","animate","motionStiffness","motionDamping","legends","dataFrom","anchor","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","CivicSpace","BarChartHorizontal","barChartMockData","Container","aidsFondsWhite","Title","Row","Rect","TooltipContent","active","payload","dataKey","stroke","LineChart","indicators","es6","height","interval","yAxisId","tickCount","orientation","content","components_TooltipContent_TooltipContent","cursor","strokeWidth","index","dot","r","fill","activeDot","AidsEpidemic","recharts_linechart_LineChart","aidsLineChartData","LineChart_styles_ComponentBase","line","xScale","yScale","stacked","minY","maxY","axisTop","axisRight","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","dotSize","dotColor","dotBorderWidth","dotBorderColor","enableDotLabel","dotLabel","dotLabelYOffset","lineChartMockData","x","EconomicIndicators","nivo_linechart_LineChart","undefined","PieChart","PieChart_ComponentBase","pie","innerRadius","padAngle","cornerRadius","borderWidth","radialLabelsSkipAngle","radialLabelsTextXOffset","radialLabelsTextColor","radialLabelsLinkOffset","radialLabelsLinkDiagonalLength","radialLabelsLinkHorizontalLength","radialLabelsLinkStrokeWidth","radialLabelsLinkColor","slicesLabelsSkipAngle","slicesLabelsTextColor","match","pieChartMockData","AidsfondsTransactions","Fragments","piechart_PieChart","NavigationContainer","FragmentContainer","PageNavigationContainer","PageNavList","PageNavItem","zoomFontFamOne","aidsFondsBlue","PageNavigation","zoomGreyZero","data-cy","onClick","elName","scroller","scrollTo","duration","delay","smooth","offset","List","ListItem","PropertyContainer","Label","TitleContainer","Heading","Separator","SectorList","SectorListItem","ProjectList","projectData","project","level","truncate","RoutedButton","path","plain","align","ProjectList_styles_Value","startDate","endDate","organisation","budget","sectors","sector","sectorInd","projectInfo","count","commitment","ControlsRow","sortByOptions","Projects","projectsLoading","IconSort","setIsSortByOpen","SortbyDialog","open","isSortByOpen","options","selectedOptionValue","sort","onOptionClick","changeSortBy","setWrapperRef","closeDialog","Lists_ProjectList_ProjectList","ModuleContainer","CountryDetailModule","fragments_PageNavigation","fragments_CountryInfo_CountryInfo","this","fragments_AidsEpidemic_AidsEpidemic","aidsEpIndicators","fragments_EconomicIndicators","fragments_CivicSpace","fragments_HumanRights","fragments_AidsfondsTransactions","fragments_Projects_Projects","projectSort","React","Component","transParams","recipient_country","page","page_size","fields","ordering","reporting_organisation_identifier","wikiParams","origin","action","prop","exsentences","exlimit","exintro","explaintext","exsectionformat","formatversion","titles","countryCode","barChartIndicators","lineChartInd","CountryDetailMediator","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","mock","lci","bind","assertThisInitialized","handleClickOutside","document","addEventListener","params","iso2","toUpperCase","dispatch","oipaActions","setState","refetch","prevProps","isEqual","countryActivities","activities","forEach","activity","push","find","activity_dates","date","toLocaleString","minimumFractionDigits","maximumFractionDigits","formatProjectData","currency","length","getProjectCountNCommitment","request","excerptSentences","split","filter","sentence","raw","slice","join","formatWikiExcerpts","indicatorAggregations","countryData","globalData","indicatorNames","total","barChartData","_barChartData$push","countryDataPoints","countryIndValue","point","defineProperty","chartColorTwo","sortBy","bcd","objectSpread","reverse","formatBarChartInfoIndicators","global","str","splitStr","toLowerCase","i","charAt","substring","titleCase","actions","indicatorData","lineChartData","chartItemInd","findIndex","indicatorName","year","formatLineChart2Data","aidsEpidemic","removeEventListener","prevState","wrapperRef","relay","_this2","target","event","contains","countrydetail_CountryDetailModule","createRefetchContainer","connect","countryExcerpt","withRouter","__webpack_require__","FragmentInfoButton","FragmentInfo","showFragmentInfo","onMouseEnter","handleMouseEnter","onMouseLeave","handleMouseLeave","elevation","fragmentInfo","children","__webpack_exports__","DescriptionParagraph","BaseParagraph","DescriptionParagraphBold","PageIntroInitial","PageIntroSecondary","theme_Theme__WEBPACK_IMPORTED_MODULE_0__","styled_components__WEBPACK_IMPORTED_MODULE_1__","zoomGreyTwo","FragmentContent","FragmentHeader","FragmentDescription","FragmentVisualisation","grommet__WEBPACK_IMPORTED_MODULE_0__","theme_Theme__WEBPACK_IMPORTED_MODULE_1__","styled_components__WEBPACK_IMPORTED_MODULE_2__","components_sort_Paragraphs__WEBPACK_IMPORTED_MODULE_3__","components_sort_Headings__WEBPACK_IMPORTED_MODULE_4__","FragmentParagraph","SectionHeading","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","SvgIconSort","assign","xlinkHref","OptionRow","ref","o","selected","IATIDetailBarChartMockData","Budget","BudgetColor","Spent","SpentColor","chartColorThree","Kenya"],"mappings":"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","file":"static/js/10.48cb1030.chunk.js","sourcesContent":["/**\n * @flow\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type { ConcreteFragment } from 'relay-runtime';\nimport type { FragmentReference } from \"relay-runtime\";\ndeclare export opaque type CountryDetailMediator_indicatorAggregations$ref: FragmentReference;\nexport type CountryDetailMediator_indicatorAggregations = {|\n  +country: ?$ReadOnlyArray<?{|\n    +indicatorName: ?string,\n    +geolocationTag: ?string,\n    +value: ?number,\n  |}>,\n  +aidsEpidemic: ?$ReadOnlyArray<?{|\n    +indicatorName: ?string,\n    +date: ?string,\n    +value: ?number,\n  |}>,\n  +$refType: CountryDetailMediator_indicatorAggregations$ref,\n|};\n*/\n\n\nconst node/*: ConcreteFragment*/ = (function(){\nvar v0 = [\n  \"undefined\"\n],\nv1 = {\n  \"kind\": \"Literal\",\n  \"name\": \"aggregation\",\n  \"value\": [\n    \"Sum(value)\"\n  ],\n  \"type\": \"[String]\"\n},\nv2 = {\n  \"kind\": \"Variable\",\n  \"name\": \"geolocationIso2_In\",\n  \"variableName\": \"countryCode\",\n  \"type\": \"[String]\"\n},\nv3 = {\n  \"kind\": \"Literal\",\n  \"name\": \"groupBy\",\n  \"value\": [\n    \"indicatorName\",\n    \"geolocationTag\",\n    \"date\",\n    \"geolocationIso2\"\n  ],\n  \"type\": \"[String]\"\n},\nv4 = {\n  \"kind\": \"Literal\",\n  \"name\": \"orderBy\",\n  \"value\": [\n    \"indicatorName\"\n  ],\n  \"type\": \"[String]\"\n},\nv5 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"indicatorName\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv6 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"value\",\n  \"args\": null,\n  \"storageKey\": null\n};\nreturn {\n  \"kind\": \"Fragment\",\n  \"name\": \"CountryDetailMediator_indicatorAggregations\",\n  \"type\": \"Query\",\n  \"metadata\": null,\n  \"argumentDefinitions\": [\n    {\n      \"kind\": \"LocalArgument\",\n      \"name\": \"countryCode\",\n      \"type\": \"[String]\",\n      \"defaultValue\": v0\n    },\n    {\n      \"kind\": \"LocalArgument\",\n      \"name\": \"barChartIndicators\",\n      \"type\": \"[String]\",\n      \"defaultValue\": v0\n    },\n    {\n      \"kind\": \"LocalArgument\",\n      \"name\": \"aidsEpIndicators\",\n      \"type\": \"[String]\",\n      \"defaultValue\": v0\n    }\n  ],\n  \"selections\": [\n    {\n      \"kind\": \"LinkedField\",\n      \"alias\": \"country\",\n      \"name\": \"datapointsAggregation\",\n      \"storageKey\": null,\n      \"args\": [\n        v1,\n        v2,\n        v3,\n        {\n          \"kind\": \"Variable\",\n          \"name\": \"indicatorName_In\",\n          \"variableName\": \"barChartIndicators\",\n          \"type\": \"[String]\"\n        },\n        v4\n      ],\n      \"concreteType\": \"DatapointsAggregationNode\",\n      \"plural\": true,\n      \"selections\": [\n        v5,\n        {\n          \"kind\": \"ScalarField\",\n          \"alias\": null,\n          \"name\": \"geolocationTag\",\n          \"args\": null,\n          \"storageKey\": null\n        },\n        v6\n      ]\n    },\n    {\n      \"kind\": \"LinkedField\",\n      \"alias\": \"aidsEpidemic\",\n      \"name\": \"datapointsAggregation\",\n      \"storageKey\": null,\n      \"args\": [\n        v1,\n        v2,\n        v3,\n        {\n          \"kind\": \"Variable\",\n          \"name\": \"indicatorName_In\",\n          \"variableName\": \"aidsEpIndicators\",\n          \"type\": \"[String]\"\n        },\n        v4\n      ],\n      \"concreteType\": \"DatapointsAggregationNode\",\n      \"plural\": true,\n      \"selections\": [\n        v5,\n        {\n          \"kind\": \"ScalarField\",\n          \"alias\": null,\n          \"name\": \"date\",\n          \"args\": null,\n          \"storageKey\": null\n        },\n        v6\n      ]\n    }\n  ]\n};\n})();\n// prettier-ignore\n(node/*: any*/).hash = 'cd068be583d6085b3efbe33819bde269';\nmodule.exports = node;\n","/**\n * @flow\n * @relayHash 805086553f1867cc8dfdf74c8cc36ac7\n */\n\n/* eslint-disable */\n\n'use strict';\n\n/*::\nimport type { ConcreteRequest } from 'relay-runtime';\ntype CountryDetailMediator_indicatorAggregations$ref = any;\nexport type CountryDetailMediatorRefetchQueryVariables = {|\n  countryCode?: ?$ReadOnlyArray<?string>,\n  barChartIndicators?: ?$ReadOnlyArray<?string>,\n  aidsEpIndicators?: ?$ReadOnlyArray<?string>,\n|};\nexport type CountryDetailMediatorRefetchQueryResponse = {|\n  +$fragmentRefs: CountryDetailMediator_indicatorAggregations$ref\n|};\nexport type CountryDetailMediatorRefetchQuery = {|\n  variables: CountryDetailMediatorRefetchQueryVariables,\n  response: CountryDetailMediatorRefetchQueryResponse,\n|};\n*/\n\n\n/*\nquery CountryDetailMediatorRefetchQuery(\n  $countryCode: [String]\n  $barChartIndicators: [String]\n  $aidsEpIndicators: [String]\n) {\n  ...CountryDetailMediator_indicatorAggregations_nfTgW\n}\n\nfragment CountryDetailMediator_indicatorAggregations_nfTgW on Query {\n  country: datapointsAggregation(groupBy: [\"indicatorName\", \"geolocationTag\", \"date\", \"geolocationIso2\"], orderBy: [\"indicatorName\"], aggregation: [\"Sum(value)\"], geolocationIso2_In: $countryCode, indicatorName_In: $barChartIndicators) {\n    indicatorName\n    geolocationTag\n    value\n  }\n  aidsEpidemic: datapointsAggregation(groupBy: [\"indicatorName\", \"geolocationTag\", \"date\", \"geolocationIso2\"], orderBy: [\"indicatorName\"], aggregation: [\"Sum(value)\"], geolocationIso2_In: $countryCode, indicatorName_In: $aidsEpIndicators) {\n    indicatorName\n    date\n    value\n  }\n}\n*/\n\nconst node/*: ConcreteRequest*/ = (function(){\nvar v0 = [\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"countryCode\",\n    \"type\": \"[String]\",\n    \"defaultValue\": null\n  },\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"barChartIndicators\",\n    \"type\": \"[String]\",\n    \"defaultValue\": null\n  },\n  {\n    \"kind\": \"LocalArgument\",\n    \"name\": \"aidsEpIndicators\",\n    \"type\": \"[String]\",\n    \"defaultValue\": null\n  }\n],\nv1 = {\n  \"kind\": \"Literal\",\n  \"name\": \"aggregation\",\n  \"value\": [\n    \"Sum(value)\"\n  ],\n  \"type\": \"[String]\"\n},\nv2 = {\n  \"kind\": \"Variable\",\n  \"name\": \"geolocationIso2_In\",\n  \"variableName\": \"countryCode\",\n  \"type\": \"[String]\"\n},\nv3 = {\n  \"kind\": \"Literal\",\n  \"name\": \"groupBy\",\n  \"value\": [\n    \"indicatorName\",\n    \"geolocationTag\",\n    \"date\",\n    \"geolocationIso2\"\n  ],\n  \"type\": \"[String]\"\n},\nv4 = {\n  \"kind\": \"Literal\",\n  \"name\": \"orderBy\",\n  \"value\": [\n    \"indicatorName\"\n  ],\n  \"type\": \"[String]\"\n},\nv5 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"indicatorName\",\n  \"args\": null,\n  \"storageKey\": null\n},\nv6 = {\n  \"kind\": \"ScalarField\",\n  \"alias\": null,\n  \"name\": \"value\",\n  \"args\": null,\n  \"storageKey\": null\n};\nreturn {\n  \"kind\": \"Request\",\n  \"operationKind\": \"query\",\n  \"name\": \"CountryDetailMediatorRefetchQuery\",\n  \"id\": null,\n  \"text\": \"query CountryDetailMediatorRefetchQuery(\\n  $countryCode: [String]\\n  $barChartIndicators: [String]\\n  $aidsEpIndicators: [String]\\n) {\\n  ...CountryDetailMediator_indicatorAggregations_nfTgW\\n}\\n\\nfragment CountryDetailMediator_indicatorAggregations_nfTgW on Query {\\n  country: datapointsAggregation(groupBy: [\\\"indicatorName\\\", \\\"geolocationTag\\\", \\\"date\\\", \\\"geolocationIso2\\\"], orderBy: [\\\"indicatorName\\\"], aggregation: [\\\"Sum(value)\\\"], geolocationIso2_In: $countryCode, indicatorName_In: $barChartIndicators) {\\n    indicatorName\\n    geolocationTag\\n    value\\n  }\\n  aidsEpidemic: datapointsAggregation(groupBy: [\\\"indicatorName\\\", \\\"geolocationTag\\\", \\\"date\\\", \\\"geolocationIso2\\\"], orderBy: [\\\"indicatorName\\\"], aggregation: [\\\"Sum(value)\\\"], geolocationIso2_In: $countryCode, indicatorName_In: $aidsEpIndicators) {\\n    indicatorName\\n    date\\n    value\\n  }\\n}\\n\",\n  \"metadata\": {},\n  \"fragment\": {\n    \"kind\": \"Fragment\",\n    \"name\": \"CountryDetailMediatorRefetchQuery\",\n    \"type\": \"Query\",\n    \"metadata\": null,\n    \"argumentDefinitions\": v0,\n    \"selections\": [\n      {\n        \"kind\": \"FragmentSpread\",\n        \"name\": \"CountryDetailMediator_indicatorAggregations\",\n        \"args\": [\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"aidsEpIndicators\",\n            \"variableName\": \"aidsEpIndicators\",\n            \"type\": null\n          },\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"barChartIndicators\",\n            \"variableName\": \"barChartIndicators\",\n            \"type\": null\n          },\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"countryCode\",\n            \"variableName\": \"countryCode\",\n            \"type\": null\n          }\n        ]\n      }\n    ]\n  },\n  \"operation\": {\n    \"kind\": \"Operation\",\n    \"name\": \"CountryDetailMediatorRefetchQuery\",\n    \"argumentDefinitions\": v0,\n    \"selections\": [\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": \"country\",\n        \"name\": \"datapointsAggregation\",\n        \"storageKey\": null,\n        \"args\": [\n          v1,\n          v2,\n          v3,\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"indicatorName_In\",\n            \"variableName\": \"barChartIndicators\",\n            \"type\": \"[String]\"\n          },\n          v4\n        ],\n        \"concreteType\": \"DatapointsAggregationNode\",\n        \"plural\": true,\n        \"selections\": [\n          v5,\n          {\n            \"kind\": \"ScalarField\",\n            \"alias\": null,\n            \"name\": \"geolocationTag\",\n            \"args\": null,\n            \"storageKey\": null\n          },\n          v6\n        ]\n      },\n      {\n        \"kind\": \"LinkedField\",\n        \"alias\": \"aidsEpidemic\",\n        \"name\": \"datapointsAggregation\",\n        \"storageKey\": null,\n        \"args\": [\n          v1,\n          v2,\n          v3,\n          {\n            \"kind\": \"Variable\",\n            \"name\": \"indicatorName_In\",\n            \"variableName\": \"aidsEpIndicators\",\n            \"type\": \"[String]\"\n          },\n          v4\n        ],\n        \"concreteType\": \"DatapointsAggregationNode\",\n        \"plural\": true,\n        \"selections\": [\n          v5,\n          {\n            \"kind\": \"ScalarField\",\n            \"alias\": null,\n            \"name\": \"date\",\n            \"args\": null,\n            \"storageKey\": null\n          },\n          v6\n        ]\n      }\n    ]\n  }\n};\n})();\n// prettier-ignore\n(node/*: any*/).hash = 'b5232c9c0d0439d3b568db33b25f37d7';\nmodule.exports = node;\n","import styled from 'styled-components';\nimport { Box } from 'grommet';\nimport { PageHeading } from 'components/sort/Headings';\n\nexport const CountryInfoContainer = styled(Box)``;\nexport const CountryName = styled(PageHeading)`\n  margin-top: 0;\n`;\nexport const CountryInfoIntro = styled.p``;\nexport const CountryInfoMore = styled.p``;\nexport const CountryInfoDisclaimer = styled.p``;\nexport const CountryInfoBarContainer = styled(Box)``;\n","import styled from 'styled-components';\nimport Theme from 'theme/Theme';\n\nexport const BarsContainer = styled.ul`\n  margin: 0;\n  width: 100%;\n  padding-left: 10px;\n`;\n\nexport const BarContainer = styled.li`\n  height: 18px;\n  display: flex;\n  align-items: center;\n  margin-bottom: 30px;\n`;\n\nexport const BarName = styled.div`\n  font-size: 16px;\n  font-weight: 300;\n  line-height: 30px;\n  color: ${Theme.color.smallTextBlack};\n  font-family: ${Theme.font.zoomFontFamTwo};\n`;\n\nexport const Bar = styled.div`\n  width: 50%;\n  height: 18px;\n  box-shadow: ${Theme.shadow.standard};\n  width: ${props => props.theme.width};\n  background: ${props => props.theme.color};\n`;\n\nexport const Value = styled.div`\n  font-size: 16px;\n  font-weight: 300;\n  margin-left: 10px;\n  color: ${Theme.color.smallTextBlack};\n  font-family: ${Theme.font.zoomFontFamTwo};\n`;\n\nexport const LegendContainer = styled.div`\n  display: flex;\n  padding-left: 10px;\n  flex-direction: column;\n`;\n\nexport const Legend = styled.div`\n  display: flex;\n  margin-top: 20px;\n  align-items: center;\n  flex-direction: row;\n`;\n\nexport const LegendColor = styled.div`\n  width: 16px;\n  height: 16px;\n  margin-right: 5px;\n  background: ${props => props.theme.color};\n`;\n\nexport const LegendText = styled.div`\n  font-size: 12px;\n  font-weight: 300;\n  font-family: ${Theme.font.zoomFontFamTwo};\n`;\n","/* base */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/* utils */\nimport get from 'lodash/get';\n\n/* components */\nimport {\n  BarsContainer,\n  Bar,\n  BarContainer,\n  BarName,\n  Value,\n  LegendContainer,\n  Legend,\n  LegendColor,\n  LegendText\n} from './HorizontalBarChart.styles';\n\nconst propTypes = {\n  countryName: PropTypes.string,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      Global: PropTypes.number,\n      GlobalColor: PropTypes.string,\n      Kenya: PropTypes.number,\n      KenyaColor: PropTypes.string,\n      country: PropTypes.string\n    })\n  )\n};\nconst defaultProps = {\n  data: [],\n  countryName: 'Kenya'\n};\n\nconst HorizontalBarChart = ({ data, countryName }) => (\n  <React.Fragment>\n    <BarsContainer>\n      {data.map(item => (\n        <React.Fragment key={item.indicator}>\n          <BarName>{item.indicator}</BarName>\n          <BarContainer>\n            <Bar\n              theme={{ width: `${item.percentage}%`, color: item.CountryColor }}\n            />\n            <Value>{item[countryName]}</Value>\n          </BarContainer>\n        </React.Fragment>\n      ))}\n    </BarsContainer>\n    <LegendContainer>\n      <Legend>\n        <LegendColor theme={{ color: get(data, '[0].CountryColor', '#fff') }} />\n        <LegendText>{countryName}</LegendText>\n      </Legend>\n    </LegendContainer>\n  </React.Fragment>\n);\n\nHorizontalBarChart.propTypes = propTypes;\nHorizontalBarChart.defaultProps = defaultProps;\n\nexport default HorizontalBarChart;\n","export const countryDetailMockData = {\n  country: 'Kenya',\n  fragments: [\n    {\n      id: 'Summary',\n      title: 'Zoom in on Kenya',\n      description: [\n        \"Kenya (/ˈkɛnjə/; locally [ˈkɛɲa] (About this sound listen)), officially the Republic of Kenya (Swahili: Jamhuri ya Kenya), is a country in Africa with its capital and largest city in Nairobi. Kenya's territory lies on the equator and overlies the East African Rift, covering a diverse and expansive terrain that extends roughly from Lake Victoria to Lake Turkana (formerly called Lake Rudolf) and further south-east to the Indian Ocean.\",\n\n        \"It is bordered by Tanzania to the south and south-west, Uganda to the west, South Sudan to the north-west, Ethiopia to the north and Somalia to the north-east. Kenya covers 581,309 km2 (224,445 sq mi) has a population of approximately 48 million.[2] Kenya's capital and largest city is Nairobi…\",\n\n        'Source: Wikipedia, not endorsed by Aidsfonds',\n      ],\n    },\n    {\n      id: 'Aids epidemic',\n      title: 'Aids epidemic',\n      description: [\n        'Civic space is the political, legislative, social and economic environment which enables citizens to come together, share their interests and concerns and act individually and collectively to influence and shape they policy-making.',\n      ],\n    },\n    {\n      id: 'Economic indicators',\n      title: 'Economic indicators',\n      description: [],\n    },\n    {\n      id: 'Civic space',\n      title: 'Civic space',\n      description: [\n        'Civic space is the political, legislative, social and economic environment which enables citizens to come together, share their interests and concerns and act individually and collectively to influence and shape they policy-making.',\n      ],\n    },\n    {\n      id: 'Human rights',\n      title: 'Human rights',\n      description: [\n        'Data on stigma and discrimination and the legal environment were extracted and mapped to better capture',\n      ],\n    },\n    {\n      id: 'Financials',\n      title: 'Aidsfonds financial transactions',\n      description: [],\n    },\n    {\n      id: 'Projects',\n      title: 'Projects',\n      description: [],\n    },\n  ],\n};\n\nexport { countryDetailMockData as default };\n","/* base */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/* components */\nimport { Box } from 'grommet';\nimport { Element } from 'react-scroll/modules';\nimport { SimpleText } from 'components/sort/Misc';\nimport {\n  PageIntroInitial,\n  PageIntroSecondary\n} from 'components/sort/Paragraphs';\nimport ModuleFragment from 'components/Layout/ModuleFragment/ModuleFragment';\nimport { CountryName } from 'modules/countrydetail/fragments/CountryInfo/CountryInfo.styles';\nimport HorizontalBarChart from 'components/charts/barcharts/horizontal/HorizontalBarChart';\n\n/* theme */\nimport theme from 'theme/Theme';\n\n/* mock */\nimport { countryDetailMockData } from '__mocks__/countryDetailMock';\n\n// FRAGMENT 2: country info\nconst propTypes = {\n  excerpts: PropTypes.arrayOf(PropTypes.string),\n  infoBarData: PropTypes.arrayOf(\n    PropTypes.shape({\n      CountryColor: PropTypes.string,\n      Global: PropTypes.number,\n      GlobalColor: PropTypes.string,\n      indicator: PropTypes.string\n    })\n  ),\n  countryName: PropTypes.string\n};\nconst defaultProps = {\n  excerpts: [],\n  infoBarData: [],\n  countryName: countryDetailMockData.country\n};\n\nconst CountryInfo = props => {\n  return (\n    <Element name=\"Summary\">\n      <ModuleFragment>\n        <CountryName>Zoom in on {props.countryName}</CountryName>\n        <Box direction=\"row\">\n          <Box width=\"50%\">\n            <PageIntroInitial>{props.excerpts[0]}</PageIntroInitial>\n            <PageIntroSecondary>{props.excerpts[1]}</PageIntroSecondary>\n            <SimpleText color={theme.color.aidsFondsRed}>\n              {countryDetailMockData.fragments[0].description[2]}\n            </SimpleText>\n          </Box>\n          <Box width=\"50%\">\n            {/* <BarChartHorizontal\n              data={props.infoBarData}\n              countryName={props.countryName}\n            /> */}\n            <HorizontalBarChart\n              data={props.infoBarData}\n              countryName={props.countryName}\n            />\n          </Box>\n        </Box>\n      </ModuleFragment>\n    </Element>\n  );\n};\n\nCountryInfo.propTypes = propTypes;\nCountryInfo.defaultProps = defaultProps;\n\nexport default CountryInfo;\n","/* base */\nimport React from 'react';\nimport styled from 'styled-components';\nimport { countryDetailMockData } from '__mocks__/countryDetailMock';\nimport {\n  ConditionMet,\n  ConditionUnmet,\n  StigmaList,\n  StigmaListItem,\n} from 'components/sort/Misc';\nimport ModuleFragment from 'components/Layout/ModuleFragment/ModuleFragment';\nimport { Element } from 'react-scroll/modules';\n\nconst ItemText = styled.p`\n  //justify-self: flex-start;\n  align-self: flex-start;\n  width: 90%;\n`;\n\nconst propTypes = {};\nconst defaultProps = {};\n\nconst HumanRights = props => {\n  return (\n    <Element name=\"Human rights\">\n      <ModuleFragment\n        title={countryDetailMockData.fragments[4].title}\n        description={countryDetailMockData.fragments[4].description[0]}\n        showInfoButton\n      >\n        <StigmaList>\n          <StigmaListItem>\n            <ConditionMet color=\"green\" />\n            <ItemText>Laws deeming sex work to be illegal</ItemText>\n          </StigmaListItem>\n          <StigmaListItem>\n            <ConditionMet color=\"green\" />\n            <ItemText>Laws that criminalize same-sex activities</ItemText>\n          </StigmaListItem>\n          <StigmaListItem>\n            <ConditionUnmet color=\"red\" />\n            <ItemText>\n              Impose compulsory treatment/detention for people who use drugs\n            </ItemText>\n          </StigmaListItem>\n          <StigmaListItem>\n            <ConditionMet color=\"green\" />\n            <ItemText>\n              Laws that specifically criminalize HIV transmission or exposure\n            </ItemText>\n          </StigmaListItem>\n        </StigmaList>\n      </ModuleFragment>\n    </Element>\n  );\n};\n\nHumanRights.propTypes = propTypes;\nHumanRights.defaultProps = defaultProps;\n\nexport default HumanRights;\n","/* base */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { ResponsiveBar } from '@nivo/bar';\nimport { Box } from 'grommet';\nimport get from 'lodash/get';\nimport Theme from 'theme/Theme';\nconst ComponentBase = styled(Box)`\n  height: 280px;\n  width: 100%;\n  //outline: 1px solid red;\n`;\n\nconst propTypes = {\n  countryName: PropTypes.string,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      Global: PropTypes.number,\n      GlobalColor: PropTypes.string,\n      Kenya: PropTypes.number,\n      KenyaColor: PropTypes.string,\n      country: PropTypes.string\n    })\n  )\n};\nconst defaultProps = {\n  data: [],\n  countryName: 'Kenya'\n};\n\nconst BarChart = props => {\n  const customTick = tick => {\n    // console.log(tick);\n    return (\n      <g\n        transform={`translate(0, ${tick.y - 40})`}\n        style={{ opacity: 1 }}\n        key={`indicator-${tick.key}`}\n      >\n        <text style={{ fontSize: 11, fontWeight: '700' }}>{tick.key}</text>\n      </g>\n    );\n  };\n\n  return (\n    <ComponentBase>\n      <ResponsiveBar\n        data={props.data}\n        keys={[props.countryName, 'Global']}\n        indexBy=\"indicator\"\n        margin={{\n          top: 0,\n          right: 0,\n          bottom: 20,\n          left: 10\n        }}\n        padding={0.4}\n        innerPadding={10}\n        groupMode=\"grouped\"\n        layout=\"horizontal\"\n        colors=\"nivo\"\n        colorBy={e => get(e, 'data.CountryColor', '#000')}\n        defs={[\n          {\n            id: 'dots',\n            type: 'patternDots',\n            background: 'inherit',\n            color: '#38bcb2',\n            size: 4,\n            padding: 1,\n            stagger: true\n          },\n          {\n            id: 'lines',\n            type: 'patternLines',\n            background: 'inherit',\n            color: '#eed312',\n            rotation: -45,\n            lineWidth: 6,\n            spacing: 10\n          }\n        ]}\n        borderColor=\"inherit:darker(1.6)\"\n        axisBottom={null}\n        enableGridY={false}\n        axisLeft={{\n          renderTick: customTick\n        }}\n        enableLabel\n        labelTextColor={Theme.color.zoomBlack}\n        label={d => <tspan y={-2}>{d.value}</tspan>}\n        animate\n        motionStiffness={90}\n        motionDamping={15}\n        legends={[\n          {\n            dataFrom: 'keys',\n            anchor: 'bottom-left',\n            direction: 'row',\n            justify: false,\n            translateX: 0,\n            translateY: 19,\n            itemsSpacing: 2,\n            itemWidth: 100,\n            itemHeight: 20,\n            itemDirection: 'left-to-right',\n            itemOpacity: 1,\n            symbolSize: 20,\n            effects: [\n              {\n                on: 'hover',\n                style: {\n                  itemOpacity: 1\n                }\n              }\n            ]\n          }\n        ]}\n      />\n    </ComponentBase>\n  );\n};\n\nBarChart.propTypes = propTypes;\nBarChart.defaultProps = defaultProps;\n\nexport default BarChart;\n","/* base */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { countryDetailMockData } from '__mocks__/countryDetailMock';\nimport { barChartMockData } from '__mocks__/barChartVerticalMock';\nimport BarChart from 'components/charts/barcharts/horizontal_old/BarChartHorizontal';\nimport ModuleFragment from 'components/Layout/ModuleFragment/ModuleFragment';\nimport { Element } from 'react-scroll';\n\nconst propTypes = {\n  background: PropTypes.string\n};\nconst defaultProps = {\n  background: ''\n};\n\nconst CivicSpace = props => {\n  return (\n    <Element name=\"Civic space\">\n      <ModuleFragment\n        background={props.background}\n        title={countryDetailMockData.fragments[3].title}\n        description={countryDetailMockData.fragments[3].description[0]}\n        showInfoButton\n      >\n        <BarChart data={barChartMockData} />\n      </ModuleFragment>\n    </Element>\n  );\n};\n\nCivicSpace.propTypes = propTypes;\nCivicSpace.defaultProps = defaultProps;\n\nexport default CivicSpace;\n","import styled from 'styled-components';\nimport Theme from 'theme/Theme';\n\nexport const Container = styled.div`\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  background: ${Theme.color.aidsFondsWhite};\n`;\n\nexport const Title = styled.div`\n  font-size: 16px;\n`;\n\nexport const Row = styled.div`\n  display: flex;\n  font-size: 14px;\n  align-items: center;\n  flex-direction: row;\n  white-space: pre-wrap;\n`;\n\nexport const Rect = styled.div`\n  width: 14px;\n  height: 14px;\n  margin-right: 5px;\n  background-color: ${props => props.theme.color};\n`;\n","/* base */\nimport React from 'react';\nimport { Container, Row, Title, Rect } from './TooltipContent.styles';\n\nconst TooltipContent = ({ active, payload, label }) => {\n  if (active && payload) {\n    return (\n      <Container>\n        <Title>\n          Year: <b>{label}</b>\n        </Title>\n        {payload.map(p => (\n          <Row key={p.dataKey}>\n            <Rect theme={{ color: p.stroke }} />\n            {p.dataKey}: <b>{p.value}</b>\n          </Row>\n        ))}\n      </Container>\n    );\n  }\n  return null;\n};\n\nexport default TooltipContent;\n","/* base */\nimport React from 'react';\n\n/* components */\nimport {\n  ResponsiveContainer,\n  LineChart as ReLineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip\n} from 'recharts';\nimport TooltipContent from './components/TooltipContent/TooltipContent';\n\nconst LineChart = ({ data, indicators }) => {\n  return (\n    <ResponsiveContainer width=\"100%\" height={400}>\n      <ReLineChart\n        data={data}\n        margin={{ top: 30, right: 0, left: 0, bottom: 0 }}\n      >\n        <CartesianGrid />\n        <XAxis dataKey=\"year\" interval={0} tick={{ fontSize: 10 }} />\n        <YAxis yAxisId=\"left\" tickCount={10} tick={{ fontSize: 10 }} />\n        <YAxis\n          tickCount={10}\n          yAxisId=\"right\"\n          orientation=\"right\"\n          tick={{ fontSize: 10 }}\n        />\n        <Tooltip\n          content={<TooltipContent />}\n          cursor={{ stroke: 'grey', strokeWidth: 1 }}\n        />\n        {indicators.map((indicator, index) => (\n          <Line\n            type=\"monotone\"\n            strokeWidth={2}\n            key={indicator.name}\n            dot={{\n              r: 4,\n              strokeWidth: 1,\n              stroke: '#fff',\n              fill: indicator.color\n            }}\n            activeDot={{\n              r: 4,\n              strokeWidth: 2,\n              stroke: '#fff',\n              fill: indicator.color\n            }}\n            dataKey={indicator.name}\n            stroke={indicator.color}\n            yAxisId={index > 1 ? 'right' : 'left'}\n          />\n        ))}\n      </ReLineChart>\n    </ResponsiveContainer>\n  );\n};\n\nexport default LineChart;\n","/* base */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { countryDetailMockData } from '__mocks__/countryDetailMock';\n// import LineChart from 'components/charts/linechart/LineChart';\nimport LineChart2 from 'components/charts/recharts_linechart/LineChart';\nimport ModuleFragment from 'components/Layout/ModuleFragment/ModuleFragment';\nimport { Element } from 'react-scroll/modules';\n\nconst propTypes = {\n  // data: PropTypes.object,\n  background: PropTypes.string,\n  aidsLineChartData: PropTypes.arrayOf(\n    PropTypes.shape({\n      color: PropTypes.string,\n      data: PropTypes.arrayOf(\n        PropTypes.shape({\n          x: PropTypes.string,\n          y: PropTypes.number\n        })\n      ),\n      id: PropTypes.string\n    })\n  )\n};\nconst defaultProps = {\n  // data: undefined,\n  background: '',\n  aidsLineChartData: []\n};\n\nconst AidsEpidemic = props => {\n  return (\n    <Element name=\"Aids epidemic\">\n      <ModuleFragment\n        background={props.background}\n        title={countryDetailMockData.fragments[1].title}\n        showInfoButton\n      >\n        {/* <LineChart data={props.aidsLineChartData} /> */}\n        <LineChart2\n          indicators={props.indicators}\n          data={props.aidsLineChartData}\n        />\n      </ModuleFragment>\n    </Element>\n  );\n};\n\nAidsEpidemic.propTypes = propTypes;\nAidsEpidemic.defaultProps = defaultProps;\n\nexport default AidsEpidemic;\n","import styled from 'styled-components';\nimport { Box } from 'grommet';\n\nexport const ComponentBase = styled(Box)`\n  height: 400px;\n  width: 100%;\n`;\n","/* base */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ResponsiveLine } from '@nivo/line';\nimport { ComponentBase } from 'components/charts/nivo_linechart/LineChart.styles';\n\nconst propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      color: PropTypes.string,\n      data: PropTypes.PropTypes.arrayOf(\n        PropTypes.shape({\n          x: PropTypes.string,\n          y: PropTypes.number\n        })\n      ),\n      id: PropTypes.string\n    })\n  )\n};\nconst defaultProps = {\n  data: []\n};\n\nconst LineChart = props => {\n  return (\n    <ComponentBase>\n      <ResponsiveLine\n        data={props.data}\n        margin={{\n          top: 20,\n          right: 30,\n          bottom: 30,\n          left: 50\n        }}\n        xScale={{\n          type: 'point'\n        }}\n        yScale={{\n          type: 'linear',\n          stacked: true\n        }}\n        minY=\"auto\"\n        maxY=\"auto\"\n        stacked={true}\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n          orient: 'bottom',\n          tickSize: 0,\n          tickPadding: 10,\n          tickRotation: 0,\n          legend: '',\n          legendOffset: 36,\n          legendPosition: 'middle'\n        }}\n        axisLeft={{\n          orient: 'left',\n          tickSize: 0,\n          tickPadding: 10,\n          tickRotation: 0,\n          legend: '',\n          legendOffset: -40,\n          legendPosition: 'middle'\n        }}\n        dotSize={9}\n        dotColor=\"inherit:darker(0.3)\"\n        dotBorderWidth={2}\n        dotBorderColor=\"#ffffff\"\n        enableDotLabel={true}\n        dotLabel=\"y\"\n        dotLabelYOffset={-12}\n        animate={true}\n        motionStiffness={90}\n        motionDamping={15}\n        legends={[]}\n      />\n    </ComponentBase>\n  );\n};\n\nLineChart.propTypes = propTypes;\nLineChart.defaultProps = defaultProps;\n\nexport default LineChart;\n","export const lineChartMockData = [\n  {\n    id: 'japan',\n    color: 'hsl(172, 70%, 50%)',\n    data: [\n      {\n        x: 'plane',\n        y: 62,\n      },\n      {\n        x: 'helicopter',\n        y: 202,\n      },\n      {\n        x: 'boat',\n        y: 47,\n      },\n      {\n        x: 'train',\n        y: 6,\n      },\n      {\n        x: 'subway',\n        y: 236,\n      },\n      {\n        x: 'bus',\n        y: 250,\n      },\n      {\n        x: 'car',\n        y: 133,\n      },\n      {\n        x: 'moto',\n        y: 49,\n      },\n      {\n        x: 'bicycle',\n        y: 42,\n      },\n      {\n        x: 'others',\n        y: 257,\n      },\n    ],\n  },\n  {\n    id: 'france',\n    color: 'hsl(91, 70%, 50%)',\n    data: [\n      {\n        x: 'plane',\n        y: 264,\n      },\n      {\n        x: 'helicopter',\n        y: 86,\n      },\n      {\n        x: 'boat',\n        y: 108,\n      },\n      {\n        x: 'train',\n        y: 106,\n      },\n      {\n        x: 'subway',\n        y: 31,\n      },\n      {\n        x: 'bus',\n        y: 176,\n      },\n      {\n        x: 'car',\n        y: 220,\n      },\n      {\n        x: 'moto',\n        y: 179,\n      },\n      {\n        x: 'bicycle',\n        y: 50,\n      },\n      {\n        x: 'others',\n        y: 199,\n      },\n    ],\n  },\n  {\n    id: 'us',\n    color: 'hsl(313, 70%, 50%)',\n    data: [\n      {\n        x: 'plane',\n        y: 233,\n      },\n      {\n        x: 'helicopter',\n        y: 276,\n      },\n      {\n        x: 'boat',\n        y: 114,\n      },\n      {\n        x: 'train',\n        y: 222,\n      },\n      {\n        x: 'subway',\n        y: 1,\n      },\n      {\n        x: 'bus',\n        y: 89,\n      },\n      {\n        x: 'car',\n        y: 228,\n      },\n      {\n        x: 'moto',\n        y: 223,\n      },\n      {\n        x: 'bicycle',\n        y: 163,\n      },\n      {\n        x: 'others',\n        y: 39,\n      },\n    ],\n  },\n  {\n    id: 'germany',\n    color: 'hsl(221, 70%, 50%)',\n    data: [\n      {\n        x: 'plane',\n        y: 226,\n      },\n      {\n        x: 'helicopter',\n        y: 26,\n      },\n      {\n        x: 'boat',\n        y: 217,\n      },\n      {\n        x: 'train',\n        y: 237,\n      },\n      {\n        x: 'subway',\n        y: 185,\n      },\n      {\n        x: 'bus',\n        y: 162,\n      },\n      {\n        x: 'car',\n        y: 42,\n      },\n      {\n        x: 'moto',\n        y: 108,\n      },\n      {\n        x: 'bicycle',\n        y: 297,\n      },\n      {\n        x: 'others',\n        y: 263,\n      },\n    ],\n  },\n  {\n    id: 'norway',\n    color: 'hsl(48, 70%, 50%)',\n    data: [\n      {\n        x: 'plane',\n        y: 101,\n      },\n      {\n        x: 'helicopter',\n        y: 30,\n      },\n      {\n        x: 'boat',\n        y: 152,\n      },\n      {\n        x: 'train',\n        y: 268,\n      },\n      {\n        x: 'subway',\n        y: 277,\n      },\n      {\n        x: 'bus',\n        y: 197,\n      },\n      {\n        x: 'car',\n        y: 65,\n      },\n      {\n        x: 'moto',\n        y: 203,\n      },\n      {\n        x: 'bicycle',\n        y: 82,\n      },\n      {\n        x: 'others',\n        y: 41,\n      },\n    ],\n  },\n];\n","/* base */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { countryDetailMockData } from '__mocks__/countryDetailMock';\nimport LineChart from 'components/charts/nivo_linechart/LineChart';\nimport { lineChartMockData } from '__mocks__/lineChartMock';\nimport ModuleFragment from 'components/Layout/ModuleFragment/ModuleFragment';\nimport { Element } from 'react-scroll/modules';\n\nconst ComponentBase = styled.div``;\n\nconst propTypes = {\n  data: PropTypes.object\n};\nconst defaultProps = {\n  data: undefined\n};\n\nconst EconomicIndicators = props => {\n  return (\n    <Element name=\"Economic indicators\">\n      <ModuleFragment\n        title={countryDetailMockData.fragments[2].title}\n        showInfoButton\n      >\n        <LineChart data={lineChartMockData} />\n      </ModuleFragment>\n    </Element>\n  );\n};\n\nEconomicIndicators.propTypes = propTypes;\nEconomicIndicators.defaultProps = defaultProps;\n\nexport default EconomicIndicators;\n","/* base */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Box } from 'grommet';\nimport { ResponsivePie } from '@nivo/pie';\nconst ComponentBase = styled(Box)`\n  height: 400px;\n  width: 100%;\n`;\n\nconst propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      color: PropTypes.string,\n      id: PropTypes.string,\n      label: PropTypes.string,\n      value: PropTypes.number,\n    }),\n  ),\n};\nconst defaultProps = {\n  data: [],\n};\n\nconst PieChart = props => {\n  return (\n    <ComponentBase>\n      <ResponsivePie\n        data={props.data}\n        margin={{\n          top: 40,\n          right: 80,\n          bottom: 80,\n          left: 80,\n        }}\n        innerRadius={0.65}\n        padAngle={0.7}\n        cornerRadius={4}\n        colors=\"nivo\"\n        colorBy=\"id\"\n        borderWidth={1}\n        borderColor=\"inherit:darker(0.2)\"\n        radialLabelsSkipAngle={10}\n        radialLabelsTextXOffset={6}\n        radialLabelsTextColor=\"#333333\"\n        radialLabelsLinkOffset={0}\n        radialLabelsLinkDiagonalLength={16}\n        radialLabelsLinkHorizontalLength={24}\n        radialLabelsLinkStrokeWidth={1}\n        radialLabelsLinkColor=\"inherit\"\n        slicesLabelsSkipAngle={10}\n        slicesLabelsTextColor=\"#333333\"\n        animate={true}\n        motionStiffness={90}\n        motionDamping={15}\n        defs={[\n          {\n            id: 'dots',\n            type: 'patternDots',\n            background: 'inherit',\n            color: 'rgba(255, 255, 255, 0.3)',\n            size: 4,\n            padding: 1,\n            stagger: true,\n          },\n          {\n            id: 'lines',\n            type: 'patternLines',\n            background: 'inherit',\n            color: 'rgba(255, 255, 255, 0.3)',\n            rotation: -45,\n            lineWidth: 6,\n            spacing: 10,\n          },\n        ]}\n        fill={[\n          {\n            match: {\n              id: 'ruby',\n            },\n            id: 'dots',\n          },\n          {\n            match: {\n              id: 'c',\n            },\n            id: 'dots',\n          },\n          {\n            match: {\n              id: 'go',\n            },\n            id: 'dots',\n          },\n          {\n            match: {\n              id: 'python',\n            },\n            id: 'dots',\n          },\n          {\n            match: {\n              id: 'scala',\n            },\n            id: 'lines',\n          },\n          {\n            match: {\n              id: 'lisp',\n            },\n            id: 'lines',\n          },\n          {\n            match: {\n              id: 'elixir',\n            },\n            id: 'lines',\n          },\n          {\n            match: {\n              id: 'javascript',\n            },\n            id: 'lines',\n          },\n        ]}\n        legends={[]}\n      />\n    </ComponentBase>\n  );\n};\n\nPieChart.propTypes = propTypes;\nPieChart.defaultProps = defaultProps;\n\nexport default PieChart;\n","export const pieChartMockData = [\n  {\n    id: 'elixir',\n    label: 'elixir',\n    value: 555,\n    color: 'hsl(59, 70%, 50%)',\n  },\n  {\n    id: 'javascript',\n    label: 'javascript',\n    value: 61,\n    color: 'hsl(264, 70%, 50%)',\n  },\n  {\n    id: 'ruby',\n    label: 'ruby',\n    value: 198,\n    color: 'hsl(116, 70%, 50%)',\n  },\n  {\n    id: 'hack',\n    label: 'hack',\n    value: 459,\n    color: 'hsl(1, 70%, 50%)',\n  },\n  {\n    id: 'sass',\n    label: 'sass',\n    value: 25,\n    color: 'hsl(39, 70%, 50%)',\n  },\n];\n","/* base */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/* components */\nimport Theme from 'theme/Theme';\nimport {\n  FragmentHeader,\n  FragmentVisualisation\n} from 'components/sort/Fragments';\nimport { Element } from 'react-scroll/modules';\nimport PieChart from 'components/charts/piechart/PieChart';\nimport ModuleFragment from 'components/Layout/ModuleFragment/ModuleFragment';\n\n/* mock */\nimport { countryDetailMockData } from '__mocks__/countryDetailMock';\nimport { pieChartMockData } from '__mocks__/pieChartMock';\n\nconst propTypes = {\n  data: PropTypes.object,\n  background: PropTypes.string\n};\nconst defaultProps = {\n  data: undefined,\n  background: Theme.color.aidsFondsWhite\n};\n\nconst AidsfondsTransactions = props => {\n  return (\n    <Element name=\"Financials\">\n      <ModuleFragment\n        background={props.background}\n        title={countryDetailMockData.fragments[5].title}\n        showInfoButton\n      >\n        <FragmentHeader />\n        <FragmentVisualisation direction=\"row\">\n          <PieChart data={pieChartMockData} />\n          <PieChart data={pieChartMockData} />\n        </FragmentVisualisation>\n      </ModuleFragment>\n    </Element>\n  );\n};\n\nAidsfondsTransactions.propTypes = propTypes;\nAidsfondsTransactions.defaultProps = defaultProps;\n\nexport default AidsfondsTransactions;\n","/* base */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { FragmentContent, FragmentContainer } from 'components/sort/Fragments';\nimport theme from 'theme/Theme';\nimport { countryDetailMockData } from '__mocks__/countryDetailMock';\nimport { Box } from 'grommet';\nimport { scroller } from 'react-scroll';\n\nconst NavigationContainer = styled(FragmentContainer)`\n  position: sticky;\n  top: 40px;\n  z-index: 1;\n  padding: 0;\n`;\n\nconst PageNavigationContainer = styled(Box)`\n  height: 65px;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst PageNavList = styled.ul`\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  display: flex;\n  justify-content: center;\n`;\n\nconst PageNavItem = styled.li`\n  margin: 0;\n  padding: 0;\n  align-items: center;\n  justify-content: center;\n  font-family: ${theme.font.zoomFontFamOne};\n  font-size: 14px;\n  color: ${theme.color.aidsFondsRed};\n  cursor: pointer;\n\n  &:hover {\n    color: ${theme.color.aidsFondsBlue};\n  }\n\n  &:after {\n    content: '|';\n    margin-right: 15px;\n    margin-left: 15px;\n  }\n\n  &:last-child {\n    &:after {\n      content: '';\n    }\n  }\n`;\nconst propTypes = {};\nconst defaultProps = {};\n\nconst PageNavigation = props => {\n  const handleClick = elName => {\n    scroller.scrollTo(elName, {\n      duration: 1000,\n      delay: 100,\n      smooth: true,\n      offset: -105, // Scrolls to element + 50 pixels down the page\n    });\n  };\n\n  return (\n    <NavigationContainer\n      background={theme.color.zoomGreyZero}\n      data-cy=\"navbar-country-detail\"\n    >\n      <FragmentContent>\n        <PageNavigationContainer>\n          <PageNavList>\n            {countryDetailMockData.fragments.map(item => (\n              <PageNavItem onClick={() => handleClick(item.id)} key={item.id}>\n                {item.id}\n              </PageNavItem>\n            ))}\n          </PageNavList>\n        </PageNavigationContainer>\n      </FragmentContent>\n    </NavigationContainer>\n  );\n};\n\nPageNavigation.propTypes = propTypes;\nPageNavigation.defaultProps = defaultProps;\n\nexport default PageNavigation;\n","import styled from 'styled-components';\nimport { Box, Heading } from 'grommet';\nimport theme from 'theme/Theme';\n\nexport const List = styled(Box)`\n  display: flex;\n  flex-direction: column;\n`;\nexport const ListItem = styled(Box)`\n  background-color: ${theme.color.zoomGreyZero};\n  margin-bottom: 2px;\n  padding: 20px;\n`;\n\nexport const PropertyContainer = styled(Box)`\n  margin-bottom: 10px;\n`;\n\nexport const Label = styled.div`\n  font-family: ${theme.font.zoomFontFamOne};\n  font-size: 14px;\n  line-height: 1;\n  margin-right: 4px;\n`;\nexport const Value = styled.div`\n  font-family: ${theme.font.zoomFontFamTwo};\n  font-size: 14px;\n  line-height: 1;\n`;\n\nexport const TitleContainer = styled(Heading)`\n  color: ${theme.color.aidsFondsRed};\n  font-family: ${theme.font.zoomFontFamTwo};\n  font-weight: normal;\n  font-size: 18px;\n  margin: 0;\n  margin-bottom: 10px;\n  line-height: 1.5;\n  max-width: 100%;\n`;\n\nexport const DateContainer = styled(Box)``;\n\nexport const Separator = styled(Box)`\n  font-family: ${theme.font.zoomFontFamOne};\n  margin-left: 4px;\n  margin-right: 4px;\n  line-height: 14px;\n`;\n\nexport const SectorList = styled(Box)`\n  flex-direction: row;\n`;\n\nexport const SectorListItem = styled(Value)`\n  &:after {\n    content: ',';\n    margin-right: 4px;\n  }\n\n  &:last-child {\n    &:after {\n      content: '';\n    }\n  }\n`;\n","/* base */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n// import { projectsMockData } from '__mocks__/projectsMock';\nimport { Box, RoutedButton } from 'grommet';\nimport {\n  Label,\n  List,\n  ListItem,\n  PropertyContainer,\n  SectorList,\n  SectorListItem,\n  Separator,\n  TitleContainer,\n  Value\n} from 'components/Lists/ProjectList/ProjectList.styles';\n\nconst propTypes = {\n  projectData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      budget: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      endDat: PropTypes.string,\n      organisation: PropTypes.string,\n      sectors: PropTypes.arrayOf(\n        PropTypes.shape({\n          name: PropTypes.string\n        })\n      ),\n      startDate: PropTypes.string,\n      title: PropTypes.string\n    })\n  ),\n  projectInfo: PropTypes.shape({\n    count: PropTypes.number,\n    commitment: PropTypes.string\n  })\n};\nconst defaultProps = {\n  projectData: [],\n  projectInfo: {\n    count: 0,\n    commitment: ''\n  }\n};\n\nconst ProjectList = props => {\n  return (\n    <List width=\"100%\">\n      {props.projectData.map(project => (\n        <ListItem key={`project-${project.id}`}>\n          {/* title container */}\n          <TitleContainer level=\"4\" truncate>\n            <RoutedButton\n              label={project.title}\n              path={`/iati-activity/${project.id}`}\n              plain\n            />\n          </TitleContainer>\n\n          {/* mixed properties */}\n          <Box>\n            <PropertyContainer\n              width=\"100%\"\n              direction=\"row\"\n              justify=\"start\"\n              align=\"center\"\n            >\n              <Box direction=\"row\">\n                <Label>Start date:</Label>\n                <Value>{project.startDate}</Value>\n              </Box>\n              <Separator>|</Separator>\n              <Box direction=\"row\">\n                <Label>End date:</Label>\n                <Value>{project.endDate}</Value>\n              </Box>\n            </PropertyContainer>\n            <PropertyContainer direction=\"row\">\n              <Label>Reporting organisation:</Label>\n              <Value>{project.organisation}</Value>\n            </PropertyContainer>\n            <PropertyContainer direction=\"row\">\n              <Label>Project budget: </Label>\n              <Value>{project.budget}</Value>\n            </PropertyContainer>\n            <PropertyContainer direction=\"row\">\n              <Label>Sectors:</Label>\n              {/* sector list */}\n              <SectorList>\n                {project.sectors.map((sector, sectorInd) => (\n                  <SectorListItem key={`sector-${sectorInd}`}>\n                    {sector.name}\n                  </SectorListItem>\n                ))}\n              </SectorList>\n            </PropertyContainer>\n          </Box>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n\nProjectList.propTypes = propTypes;\nProjectList.defaultProps = defaultProps;\n\nexport default ProjectList;\n","/* base */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\n/* components */\nimport ModuleFragment from 'components/Layout/ModuleFragment/ModuleFragment';\nimport ProjectList from 'components/Lists/ProjectList/ProjectList';\nimport { Element } from 'react-scroll/modules';\nimport SvgIconSort from 'assets/icons/IconSort';\nimport SortbyDialog from 'components/Dialog/SortbyDialog/SortbyDialog';\n\n/* mock */\nimport { countryDetailMockData } from '__mocks__/countryDetailMock';\n\nexport const ControlsRow = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding-bottom: 20px;\n  justify-content: flex-end;\n`;\n\n/* consts */\nconst sortByOptions = [\n  { label: 'Title (asc)', value: 'title' },\n  { label: 'Title (desc)', value: '-title' },\n  { label: 'Start date (asc)', value: 'start_date' },\n  { label: 'Start date (desc)', value: '-start_date' },\n  { label: 'End date (asc)', value: 'end_date' },\n  { label: 'End date (desc)', value: '-end_date' },\n  { label: 'Total budget (asc)', value: 'activity_budget_value' },\n  { label: 'Total budget (desc)', value: '-activity_budget_value' }\n];\n\nconst propTypes = {\n  projectData: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      budget: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      endDat: PropTypes.string,\n      organisation: PropTypes.string,\n      sectors: PropTypes.arrayOf(\n        PropTypes.shape({\n          name: PropTypes.string\n        })\n      ),\n      startDate: PropTypes.string,\n      title: PropTypes.string\n    })\n  ),\n  projectInfo: PropTypes.shape({\n    count: PropTypes.number,\n    commitment: PropTypes.string\n  }),\n  projectsLoading: PropTypes.bool,\n  sort: PropTypes.string,\n  changeSortBy: PropTypes.func,\n  setWrapperRef: PropTypes.func,\n  setIsSortByOpen: PropTypes.func,\n  isSortByOpen: PropTypes.bool\n};\nconst defaultProps = {\n  projectData: [],\n  projectInfo: {\n    count: 0,\n    commitment: ''\n  },\n  projectsLoading: false,\n  sort: '',\n  changeSortBy: null,\n  setWrapperRef: null,\n  setIsSortByOpen: null,\n  isSortByOpen: false\n};\n\nconst Projects = props => {\n  const title = props.projectsLoading\n    ? 'Loading...'\n    : `${props.projectInfo.count} Projects with a total of ${\n        props.projectInfo.commitment\n      } commitment`;\n  return (\n    <Element name=\"Projects\">\n      <ModuleFragment\n        title={title}\n        description={countryDetailMockData.fragments[6].description[0]}\n      >\n        <ControlsRow>\n          <div>\n            <SvgIconSort onClick={props.setIsSortByOpen} />\n            <SortbyDialog\n              open={props.isSortByOpen}\n              options={sortByOptions}\n              selectedOptionValue={props.sort}\n              onOptionClick={props.changeSortBy}\n              setWrapperRef={props.setWrapperRef}\n              closeDialog={props.setIsSortByOpen}\n            />\n          </div>\n        </ControlsRow>\n        <ProjectList projectData={props.projectData} />\n      </ModuleFragment>\n    </Element>\n  );\n};\n\nProjects.propTypes = propTypes;\nProjects.defaultProps = defaultProps;\n\nexport default Projects;\n","/* base */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Box } from 'grommet';\nimport theme from 'theme/Theme';\n\nimport CountryInfo from 'modules/countrydetail/fragments/CountryInfo/CountryInfo';\nimport HumanRights from 'modules/countrydetail/fragments/HumanRights';\nimport CivicSpace from 'modules/countrydetail/fragments/CivicSpace';\nimport AidsEpidemic from 'modules/countrydetail/fragments/AidsEpidemic/AidsEpidemic';\nimport EconomicIndicators from 'modules/countrydetail/fragments/EconomicIndicators';\nimport AidsfondsTransactions from 'modules/countrydetail/fragments/AidsfondsTransactions';\nimport PageNavigation from 'modules/countrydetail/fragments/PageNavigation';\nimport Projects from 'modules/countrydetail/fragments/Projects/Projects';\n\nconst ModuleContainer = styled(Box)`\n  background-color: ${theme.color.aidsFondsWhite};\n`;\n\nconst propTypes = {\n  // data: PropTypes.object,\n  excerpts: PropTypes.arrayOf(PropTypes.string),\n  projectData: PropTypes.arrayOf(\n    PropTypes.shape({\n      budget: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      endDat: PropTypes.string,\n      organisation: PropTypes.string,\n      sectors: PropTypes.arrayOf(\n        PropTypes.shape({\n          name: PropTypes.string\n        })\n      ),\n      startDate: PropTypes.string,\n      title: PropTypes.string\n    })\n  ),\n  projectInfo: PropTypes.shape({\n    count: PropTypes.number,\n    commitment: PropTypes.string\n  }),\n  countryName: PropTypes.string,\n  infoBarData: PropTypes.arrayOf(\n    PropTypes.shape({\n      CountryColor: PropTypes.string,\n      Global: PropTypes.number,\n      GlobalColor: PropTypes.string,\n      indicator: PropTypes.string\n    })\n  ),\n  aidsLineChartData: PropTypes.arrayOf(\n    PropTypes.shape({\n      color: PropTypes.string,\n      data: PropTypes.arrayOf(\n        PropTypes.shape({\n          x: PropTypes.string,\n          y: PropTypes.number\n        })\n      ),\n      id: PropTypes.string\n    })\n  ),\n  projectsLoading: PropTypes.bool,\n  projectSort: PropTypes.string,\n  changeSortBy: PropTypes.func,\n  setWrapperRef: PropTypes.func,\n  setIsSortByOpen: PropTypes.func,\n  isSortByOpen: PropTypes.bool\n};\nconst defaultProps = {\n  // data: undefined,\n  excerpts: [],\n  projectData: [],\n  projectInfo: {\n    count: 0,\n    commitment: ''\n  },\n  countryName: '',\n  infoBarData: [],\n  aidsLineChartData: [],\n  projectsLoading: false,\n  projectSort: '',\n  changeSortBy: null,\n  setWrapperRef: null,\n  setIsSortByOpen: null,\n  isSortByOpen: false\n};\n\nclass CountryDetailModule extends React.Component {\n  render() {\n    return (\n      <ModuleContainer>\n        {/* Fragment 1: Page navigation */}\n        <PageNavigation />\n\n        {/* Fragment 2: Country info */}\n        <CountryInfo\n          infoBarData={this.props.infoBarData}\n          countryName={this.props.countryName}\n          excerpts={this.props.excerpts}\n        />\n\n        {/* Fragment 2: aids epidemic */}\n        <AidsEpidemic\n          background={theme.color.zoomGreyZero}\n          indicators={this.props.aidsEpIndicators}\n          aidsLineChartData={this.props.aidsLineChartData}\n        />\n\n        {/* Fragment 3: economic indicators */}\n        <EconomicIndicators />\n\n        {/* Fragment 4: civic space */}\n        <CivicSpace background={theme.color.zoomGreyZero} />\n\n        {/* Fragment 5: human rights */}\n        <HumanRights />\n\n        {/* Fragment 5: aidsfonds financial transactions */}\n        <AidsfondsTransactions background={theme.color.zoomGreyZero} />\n\n        {/* Fragment 5: Projects */}\n        <Projects\n          projectData={this.props.projectData}\n          projectInfo={this.props.projectInfo}\n          projectsLoading={this.props.projectsLoading}\n          sort={this.props.projectSort}\n          changeSortBy={this.props.changeSortBy}\n          setWrapperRef={this.props.setWrapperRef}\n          setIsSortByOpen={this.props.setIsSortByOpen}\n          isSortByOpen={this.props.isSortByOpen}\n        />\n      </ModuleContainer>\n    );\n  }\n}\n\nCountryDetailModule.propTypes = propTypes;\nCountryDetailModule.defaultProps = defaultProps;\n\nexport default CountryDetailModule;\n","const data = {\n  transParams: {\n    recipient_country: 'KE',\n    page: 1,\n    page_size: 400,\n    fields:\n      'sectors,title,id,activity_dates,reporting_organisation,aggregations',\n    ordering: '-activity_budget_value',\n    reporting_organisation_identifier: 'NL-KVK-41207989'\n  },\n  wikiParams: {\n    origin: '*',\n    action: 'query',\n    prop: 'extracts',\n    exsentences: 5,\n    exlimit: 1,\n    exintro: 1,\n    explaintext: 1,\n    exsectionformat: 'raw',\n    formatversion: 2,\n    titles: 'Kenya'\n  },\n  countryCode: 'ke',\n  // So currently these are the default indicators\n  // that are gonna be used for all country details\n  barChartIndicators: [\n    'people living with hiv',\n    'new hiv infections',\n    'aids-related deaths'\n  ],\n  // So currently for aids epidemics data we will use\n  // this array of indicators\n  aidsEpIndicators: [\n    'new hiv infections',\n    'aids-related deaths',\n    'people living with hiv',\n    'children living with hiv',\n    'coverage of people receiving art'\n  ],\n  lineChartInd: [\n    { name: 'new hiv infections', color: 'hsl(172, 70%, 50%)' },\n    { name: 'aids-related deaths', color: 'hsl(91, 70%, 50%)' },\n    { name: 'people living with hiv', color: 'hsl(313, 70%, 50%)' },\n    { name: 'children living with hiv', color: 'hsl(221, 70%, 50%)' },\n    { name: 'coverage of people receiving art', color: 'hsl(48, 70%, 50%)' }\n  ]\n};\n\nexport default data;\n","/* base */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport connect from 'react-redux/es/connect/connect';\nimport CountryDetailModule from 'modules/countrydetail/CountryDetailModule';\nimport { createRefetchContainer, graphql } from 'react-relay';\nimport { withRouter } from 'react-router';\n\n/* helpers */\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport {\n  titleCase,\n  formatBarChartInfoIndicators,\n  // formatLineChartData,\n  formatProjectData,\n  formatWikiExcerpts,\n  getProjectCountNCommitment,\n  formatLineChart2Data\n} from 'mediators/ModuleMediators/CountryDetailMediator/CountryDetailMediator.utils';\n\n/* actions */\nimport * as actions from 'services/actions/index';\nimport * as oipaActions from 'services/actions/oipa';\n\n/* mock */\nimport mock from 'mediators/ModuleMediators/CountryDetailMediator/CountryDetailMediator.mock';\n\nconst propTypes = {\n  excerpts: PropTypes.shape({\n    values: PropTypes.shape({\n      origin: PropTypes.string,\n      action: PropTypes.string,\n      prop: PropTypes.string,\n      exsentences: PropTypes.number,\n      exintro: PropTypes.number,\n      explaintext: PropTypes.number,\n      exsectionformat: PropTypes.string,\n      formatversion: PropTypes.number,\n      titles: PropTypes.string,\n      format: PropTypes.string\n    }),\n    request: PropTypes.bool,\n    success: PropTypes.bool,\n    data: PropTypes.shape({\n      batchcomplete: PropTypes.bool,\n      query: PropTypes.shape({\n        pages: PropTypes.arrayOf(\n          PropTypes.shape({\n            pageid: PropTypes.number,\n            ns: PropTypes.number,\n            title: PropTypes.string,\n            extract: PropTypes.string\n          })\n        )\n      })\n    }),\n    error: PropTypes.shape({\n      status: PropTypes.string,\n      statusText: PropTypes.string,\n      result: PropTypes.object\n    })\n  }),\n  countryActivities: PropTypes.shape({\n    values: PropTypes.shape({\n      recipient_country: PropTypes.string,\n      page: PropTypes.number,\n      page_size: PropTypes.number,\n      fields: PropTypes.string\n    }),\n    request: PropTypes.bool,\n    success: PropTypes.bool,\n    data: PropTypes.shape({\n      count: PropTypes.number,\n      next: PropTypes.string,\n      previous: PropTypes.string,\n      results: PropTypes.array\n    }),\n    error: PropTypes.shape({\n      status: PropTypes.string,\n      statusText: PropTypes.string,\n      result: PropTypes.object\n    })\n  }),\n  indicatorAggregations: PropTypes.shape({\n    country: PropTypes.arrayOf(\n      PropTypes.shape({\n        indicatorName: PropTypes.string,\n        geolocationTag: PropTypes.string,\n        value: PropTypes.number\n      })\n    ),\n    global: PropTypes.arrayOf(\n      PropTypes.shape({\n        indicatorName: PropTypes.string,\n        value: PropTypes.number\n      })\n    ),\n    aidsEpidemic: PropTypes.arrayOf(\n      PropTypes.shape({\n        indicatorName: PropTypes.string,\n        date: PropTypes.string,\n        value: PropTypes.number\n      })\n    )\n  })\n};\nconst defaultProps = {\n  excerpts: {},\n  countryActivities: {},\n  indicatorAggregations: {}\n};\n\nclass CountryDetailMediator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      transParams: mock.transParams,\n      wikiParams: mock.wikiParams,\n      projectInfo: {},\n      projectData: [],\n      excerpts: ['', ''],\n      barChartIndicators: mock.barChartIndicators,\n      aidsEpIndicators: mock.lineChartInd.map(lci => lci.name),\n      aidsLineChartData: [],\n      countryName: '',\n      infoBarData: [],\n      projectSort: mock.transParams.ordering,\n      isSortByOpen: false,\n      projectsLoading: false\n    };\n\n    this.changeSortBy = this.changeSortBy.bind(this);\n    this.setWrapperRef = this.setWrapperRef.bind(this);\n    this.setIsSortByOpen = this.setIsSortByOpen.bind(this);\n    this.handleClickOutside = this.handleClickOutside.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside);\n    // We get countries related activities here\n    const transParams = this.state.transParams;\n    transParams.recipient_country = this.props.match.params.iso2.toUpperCase();\n\n    this.props.dispatch(oipaActions.countryActivitiesRequest(transParams));\n\n    this.setState({ transParams });\n    // We get countries related indicator data here\n    this.refetch();\n  }\n\n  componentDidUpdate(prevProps) {\n    // We format the loaded country activities here and save it in state\n    if (\n      !isEqual(\n        this.props.countryActivities.data,\n        prevProps.countryActivities.data\n      )\n    ) {\n      const projectData = formatProjectData(\n        get(this.props.countryActivities, 'data.results', [])\n      );\n      const projectInfo = getProjectCountNCommitment(\n        get(this.props.countryActivities, 'data.results', [])\n      );\n      this.setState({\n        projectData,\n        projectInfo,\n        projectsLoading: this.props.countryActivities.request\n      });\n    }\n\n    if (!isEqual(this.props.excerpts.data, prevProps.excerpts.data)) {\n      const excerpts = formatWikiExcerpts(this.props.excerpts);\n      this.setState({ excerpts });\n    }\n\n    // Here we format the data retrieved from graphql\n    if (\n      !isEqual(\n        this.props.indicatorAggregations,\n        prevProps.indicatorAggregations\n      )\n    ) {\n      // Save the countries name that we retrieved\n      // from the indicators\n      const countryName = get(\n        this.props.indicatorAggregations,\n        'country[0].geolocationTag',\n        'CountryNotFound'\n      );\n      // Here we format the bar chart indicator data\n      const infoBarData = formatBarChartInfoIndicators(\n        this.props.indicatorAggregations.country,\n        this.props.indicatorAggregations.global,\n        this.state.barChartIndicators,\n        countryName\n      );\n\n      // We dispatch wiki api here, cause this is the place where we get the country name\n      const wikiParams = this.state.wikiParams;\n      wikiParams.titles = titleCase(countryName);\n      this.props.dispatch(actions.countryExcerptRequest(this.state.wikiParams));\n\n      const aidsLineChartData = formatLineChart2Data(\n        this.props.indicatorAggregations.aidsEpidemic\n      );\n\n      this.setState({\n        infoBarData,\n        countryName,\n        aidsLineChartData,\n        wikiParams\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside);\n  }\n\n  setIsSortByOpen() {\n    this.setState(prevState => ({\n      isSortByOpen: !prevState.isSortByOpen\n    }));\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  refetch() {\n    this.props.relay.refetch({\n      countryCode: [this.props.match.params.iso2.toLowerCase()],\n      barChartIndicators: this.state.barChartIndicators,\n      aidsEpIndicators: this.state.aidsEpIndicators\n    });\n  }\n\n  changeSortBy(e) {\n    const value = e.target.id;\n    this.setState(\n      {\n        projectSort: value\n      },\n      () => {\n        this.props.dispatch(\n          oipaActions.countryActivitiesRequest({\n            ...this.state.transParams,\n            ordering: value\n          })\n        );\n      }\n    );\n  }\n\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.setState({ isSortByOpen: false });\n    }\n  }\n\n  render() {\n    return (\n      <CountryDetailModule\n        projectData={this.state.projectData}\n        projectInfo={this.state.projectInfo}\n        infoBarData={this.state.infoBarData}\n        aidsLineChartData={this.state.aidsLineChartData}\n        countryName={this.state.countryName}\n        excerpts={this.state.excerpts}\n        aidsEpIndicators={mock.lineChartInd}\n        projectSort={this.state.projectSort}\n        changeSortBy={this.changeSortBy}\n        setWrapperRef={this.setWrapperRef}\n        setIsSortByOpen={this.setIsSortByOpen}\n        isSortByOpen={this.state.isSortByOpen}\n        projectsLoading={this.state.projectsLoading}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    excerpts: state.countryExcerpt,\n    countryActivities: state.countryActivities\n  };\n};\n\nCountryDetailMediator.propTypes = propTypes;\nCountryDetailMediator.defaultProps = defaultProps;\n\nexport default createRefetchContainer(\n  connect(mapStateToProps)(withRouter(CountryDetailMediator)),\n  graphql`\n    fragment CountryDetailMediator_indicatorAggregations on Query\n      @argumentDefinitions(\n        countryCode: { type: \"[String]\", defaultValue: [\"undefined\"] }\n        barChartIndicators: { type: \"[String]\", defaultValue: [\"undefined\"] }\n        aidsEpIndicators: { type: \"[String]\", defaultValue: [\"undefined\"] }\n      ) {\n      country: datapointsAggregation(\n        groupBy: [\"indicatorName\", \"geolocationTag\", \"date\", \"geolocationIso2\"]\n        orderBy: [\"indicatorName\"]\n        aggregation: [\"Sum(value)\"]\n        geolocationIso2_In: $countryCode\n        indicatorName_In: $barChartIndicators\n      ) {\n        indicatorName\n        geolocationTag\n        value\n      }\n      aidsEpidemic: datapointsAggregation(\n        groupBy: [\"indicatorName\", \"geolocationTag\", \"date\", \"geolocationIso2\"]\n        orderBy: [\"indicatorName\"]\n        aggregation: [\"Sum(value)\"]\n        geolocationIso2_In: $countryCode\n        indicatorName_In: $aidsEpIndicators\n      ) {\n        indicatorName\n        date\n        value\n      }\n    }\n  `,\n  graphql`\n    query CountryDetailMediatorRefetchQuery(\n      $countryCode: [String]\n      $barChartIndicators: [String]\n      $aidsEpIndicators: [String]\n    ) {\n      ...CountryDetailMediator_indicatorAggregations\n        @arguments(\n          countryCode: $countryCode\n          barChartIndicators: $barChartIndicators\n          aidsEpIndicators: $aidsEpIndicators\n        )\n    }\n  `\n);\n","import get from 'lodash/get';\nimport map from 'lodash/map';\nimport find from 'lodash/find';\nimport findIndex from 'lodash/findIndex';\nimport sortBy from 'lodash/sortBy';\nimport filter from 'lodash/filter';\nimport theme from 'theme/Theme';\nimport { split } from 'sentence-splitter';\n\n/*\n  Formats project data so it would be acceptable\n  for the project list component\n*/\nexport function formatProjectData(activities) {\n  const projectData = [];\n\n  activities.forEach(activity => {\n    const sectors = [];\n\n    activity.sectors.forEach(sector => {\n      sectors.push({\n        name: get(sector, 'sector.name', 'No sector name')\n      });\n    });\n\n    let startDate = find(activity.activity_dates, date => {\n      return date.type.name === 'Planned start';\n    });\n\n    let endDate = find(activity.activity_dates, date => {\n      return date.type.name === 'Planned End';\n    });\n\n    if (!startDate && !endDate) {\n      startDate = find(activity.activity_dates, date => {\n        return date.type.name === 'Actual start';\n      });\n      endDate = find(activity.activity_dates, date => {\n        return date.type.name === 'Actual end';\n      });\n    }\n\n    startDate = get(startDate, 'iso_date', 'No planned start date');\n\n    endDate = get(endDate, 'iso_date', 'No planned end date');\n\n    projectData.push({\n      id: activity.id,\n      sectors,\n      title: get(activity, 'title.narratives[0].text', 'No project title'),\n      startDate,\n      endDate,\n      organisation: get(\n        activity,\n        'reporting_organisation.narratives[0].text',\n        'No reporting organisation title'\n      ),\n      budget: `${get(\n        activity,\n        'aggregations.activity.budget_currency',\n        ''\n      )} ${get(\n        activity,\n        'aggregations.activity.budget_value',\n        'Not Specified'\n      ).toLocaleString(\n        {},\n        {\n          minimumFractionDigits: 0,\n          maximumFractionDigits: 2\n        }\n      )}`\n    });\n  });\n\n  return projectData;\n}\n\n/*\n  Calculates the total count of projects retrieved\n  and total commitment of them\n*/\nexport function getProjectCountNCommitment(activities) {\n  let commitment = 0;\n  const currency =\n    get(activities, '[0].aggregations.activity.commitment_currency', '') ===\n    null\n      ? get(activities, '[0].aggregations.activity.budget_currency', '')\n      : get(activities, '[0].aggregations.activity.commitment_currency', '');\n  activities.forEach(activity => {\n    commitment += get(activity, 'aggregations.activity.commitment_value', 0);\n  });\n  return {\n    count: activities.length,\n    commitment: `${currency} ${commitment.toLocaleString(\n      {},\n      {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 2\n      }\n    )}`\n  };\n}\n\n/*\n  Splits wikipedia country information text into 2 excerpts/paragraphs\n*/\nexport function formatWikiExcerpts(excerpts) {\n  let excerptSentences = split(\n    get(excerpts, 'data.query.pages[0].extract', '')\n  );\n  excerptSentences = map(\n    filter(excerptSentences, sentence => {\n      return sentence.type !== 'WhiteSpace';\n    }),\n    sentence => {\n      return sentence.raw;\n    }\n  );\n  const excerpt0 = excerptSentences.slice(0, 2).join(' ');\n  const excerpt1 = excerptSentences.slice(2).join(' ');\n  return [excerpt0, excerpt1];\n}\n\n// This basically formats the data for the bar charts shown\n// in country info\nexport function formatBarChartInfoIndicators(\n  countryData,\n  globalData,\n  indicatorNames,\n  countryName\n) {\n  let total = 0;\n  let results = [];\n  const barChartData = [];\n\n  // console.log(countryData);\n\n  indicatorNames.forEach((name, index) => {\n    if (index < 3) {\n      const countryDataPoints = filter(countryData, ['indicatorName', name]);\n      // const globalDataPoints = filter(globalData, ['indicatorName', name]);\n\n      let countryIndValue = 0;\n      countryDataPoints.forEach(point => {\n        countryIndValue += point.value;\n      });\n      total += countryIndValue;\n\n      // let globalIndValue = 0;\n      // globalDataPoints.forEach(point => {\n      //   globalIndValue += point.value;\n      // });\n\n      barChartData.push({\n        indicator: name,\n        [countryName]: countryIndValue,\n        CountryColor: theme.color.chartColorTwo\n        // Global: globalIndValue,\n        // GlobalColor: theme.color.chartColorThree\n      });\n    }\n  });\n\n  results = sortBy(barChartData, [countryName]).map(bcd => ({\n    ...bcd,\n    percentage: total !== 0 ? (100 * bcd[countryName]) / total : 0\n  }));\n\n  return results.reverse();\n}\n\n// formats linechart data from indicators\nexport function formatLineChartData(indicatorData) {\n  const lineChartData = [];\n  const colorArray = [\n    'hsl(172, 70%, 50%)',\n    'hsl(91, 70%, 50%)',\n    'hsl(313, 70%, 50%)',\n    'hsl(221, 70%, 50%)',\n    'hsl(48, 70%, 50%)'\n  ];\n\n  let colorInd = 0;\n  indicatorData.forEach(item => {\n    const chartItemInd = findIndex(lineChartData, ['id', item.indicatorName]);\n    if (chartItemInd !== -1) {\n      const itemData = lineChartData[chartItemInd].data;\n      itemData.push({\n        x: item.date,\n        y: item.value\n      });\n      lineChartData[chartItemInd].data = itemData;\n    } else {\n      lineChartData.push({\n        id: item.indicatorName,\n        color:\n          colorInd >= colorArray.length\n            ? colorArray[colorArray.length - 1]\n            : colorArray[colorInd],\n        data: [\n          {\n            x: item.date,\n            y: item.value\n          }\n        ]\n      });\n      colorInd += 1;\n    }\n  });\n\n  // so the item with the biggest data value needs to be first\n  // as that is how line chart that we use works\n  // cause if the item with the biggest value will not be the first one\n  // most of its data will not be shown\n  let max = 0;\n  let maxInd = 0;\n  lineChartData.forEach((item, index) => {\n    if (item.data.length > max) {\n      max = item.data.length;\n      maxInd = index;\n    }\n  });\n\n  if (lineChartData.length > 0) {\n    const bigLineitem = lineChartData[maxInd];\n    lineChartData.splice(maxInd, 1);\n    lineChartData.unshift(bigLineitem);\n  }\n\n  return lineChartData;\n}\n\nexport function formatLineChart2Data(indicatorData) {\n  const lineChartData = [];\n\n  indicatorData.forEach(item => {\n    const chartItemInd = findIndex(lineChartData, ['year', item.date]);\n    if (chartItemInd > -1) {\n      lineChartData[chartItemInd] = {\n        ...lineChartData[chartItemInd],\n        [item.indicatorName]: item.value\n      };\n    } else {\n      lineChartData.push({\n        year: item.date,\n        [item.indicatorName]: item.value\n      });\n    }\n  });\n\n  return lineChartData;\n}\n\nexport function titleCase(str) {\n  const splitStr = str.toLowerCase().split(' ');\n  for (let i = 0; i < splitStr.length; i++) {\n    splitStr[i] =\n      splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n  }\n  return splitStr.join(' ');\n}\n","import styled from 'styled-components';\nimport theme from 'theme/Theme';\nimport { Box } from 'grommet';\n\nexport const FragmentInfoButton = styled.div`\n  height: 20px;\n  width: 20px;\n  border-radius: 50%;\n  background-color: ${theme.color.aidsFondsRed};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  user-select: none;\n  position: absolute;\n  right: 0;\n  top: 0;\n\n  &:hover {\n    background-color: darkgrey;\n  }\n\n  &:after {\n    content: 'i';\n    font-size: 13px;\n    text-align: center;\n    color: ${theme.color.aidsFondsWhite};\n    font-family: ${theme.color.zoomFontFamOne};\n    user-select: none;\n  }\n`;\n\nexport const FragmentInfo = styled(Box)`\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  width: 250px;\n  background-color: white;\n  padding: 20px;\n  z-index: 2;\n  border-radius: 2%;\n  font-family: ${theme.font.zoomFontFamTwo};\n`;\n","/* base */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  FragmentContainer,\n  FragmentContent,\n  FragmentDescription,\n  FragmentHeader,\n  FragmentVisualisation,\n} from 'components/sort/Fragments';\nimport { FragmentInfo, FragmentInfoButton } from './ModuleFragment.style';\n\nconst propTypes = {\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  description: PropTypes.string,\n  background: PropTypes.string,\n  fragmentInfo: PropTypes.string,\n  children: PropTypes.any,\n  showInfoButton: PropTypes.bool,\n};\nconst defaultProps = {\n  fragmentInfo: 'Lorem ipsum dolor simet empty module description.',\n  showInfoButton: false,\n};\n\nclass ModuleFragment extends React.Component {\n  state = {\n    showFragmentInfo: false,\n  };\n\n  handleMouseEnter() {\n    this.setState({ showFragmentInfo: true });\n  }\n\n  handleMouseLeave() {\n    this.setState({ showFragmentInfo: false });\n  }\n\n  render() {\n    return (\n      <FragmentContainer background={this.props.background}>\n        <FragmentContent>\n          {this.props.title && (\n            <FragmentHeader>{this.props.title}</FragmentHeader>\n          )}\n\n          {this.props.description && (\n            <FragmentDescription>{this.props.description}</FragmentDescription>\n          )}\n\n          {this.props.showInfoButton && (\n            <FragmentInfoButton\n              data-cy=\"tooltip-fragment-info\"\n              onMouseEnter={() => this.handleMouseEnter()}\n              onMouseLeave={() => this.handleMouseLeave()}\n            />\n          )}\n\n          {this.state.showFragmentInfo && (\n            <FragmentInfo elevation=\"medium\">\n              {this.props.fragmentInfo}\n            </FragmentInfo>\n          )}\n\n          <FragmentVisualisation>{this.props.children}</FragmentVisualisation>\n        </FragmentContent>\n      </FragmentContainer>\n    );\n  }\n}\n\nModuleFragment.propTypes = propTypes;\nModuleFragment.defaultProps = defaultProps;\n\nexport default ModuleFragment;\n","import theme from 'theme/Theme';\nimport styled from 'styled-components';\n\nexport const DescriptionParagraph = styled.div`\n  text-align: justify;\n  color: ${theme.color.zoomBlack};\n  font-family: ${theme.font.zoomFontFamTwo};\n  font-weight: 300;\n  line-height: 33px;\n  font-size: 18px;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n`;\n\nexport const BaseParagraph = styled.p`\n  color: ${theme.color.zoomGreyTwo};\n  font-weight: 300;\n  line-height: 1.5;\n  font-size: 20px;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n`;\n\nexport const DescriptionParagraphBold = styled(DescriptionParagraph)`\n  font-weight: 700;\n`;\n\nexport const PageIntroInitial = styled(BaseParagraph)`\n  font-size: 20px;\n  font-weight: 400;\n  font-family: ${theme.font.zoomFontFamOne};\n  margin-top: 0;\n`;\n\nexport const PageIntroSecondary = styled(BaseParagraph)`\n  font-size: 20px;\n  font-family: ${theme.font.zoomFontFamTwo};\n`;\n","import { Box, Button, DataTable, Text } from 'grommet';\nimport theme from 'theme/Theme';\nimport styled from 'styled-components';\nimport { BaseParagraph } from 'components/sort/Paragraphs';\nimport { SectionHeading } from 'components/sort/Headings';\n\nexport const fragmentContentWidth = '1024px';\n\nexport const FragmentParagraph = styled(BaseParagraph)`\n  font-family: ${theme.font.zoomFontFamTwo};\n  margin-top: 0;\n`;\n\nexport const FragmentContainer = styled(Box)`\n  width: 100%;\n  align-items: center;\n  justify-content: center;\n  padding: 40px;\n  position: relative;\n`;\n\nexport const FragmentContent = styled(Box)`\n  width: 100%;\n  max-width: ${fragmentContentWidth};\n  justify-content: center;\n  align-items: center;\n  position: relative;\n`;\n\nexport const FragmentHeader = styled(SectionHeading)`\n  margin-top: 0;\n  margin-bottom: 50px;\n`;\nexport const FragmentDescription = styled(FragmentParagraph)`\n  max-width: 900px;\n  align-self: flex-start;\n`;\nexport const FragmentVisualisation = styled(Box)`\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  font-family: ${theme.font.zoomFontFamTwo};\n`;\n","import React from 'react';\n\nconst SvgIconSort = props => (\n  <svg width={18} height={12} {...props} style={{ cursor: 'pointer' }}>\n    <defs>\n      <path\n        d=\"M1115 370h12v2h-12zm18-5v2h-18v-2zm-18 10h6v2h-6z\"\n        id=\"icon_sort_svg__a\"\n      />\n    </defs>\n    <g transform=\"translate(-1115 -365)\">\n      <use xlinkHref=\"#icon_sort_svg__a\" fill=\"#ff0100\" />\n    </g>\n  </svg>\n);\n\nexport default SvgIconSort;\n","import styled from 'styled-components';\nimport theme from 'theme/Theme';\n\nexport const ComponentBase = styled.div`\n  position: absolute;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);\n  border-radius: 0;\n  background-color: ${theme.color.aidsFondsWhite};\n  margin-top: 10px;\n  padding: 10px 0;\n  z-index: 1;\n`;\n\nexport const OptionRow = styled.div`\n  font-size: 14px;\n  white-space: nowrap;\n  color: ${theme.color.aidsFondsRed};\n  padding: 5px 10px;\n  background-color: ${props => props.theme.background};\n\n  &:hover {\n    background-color: ${theme.color.zoomGreyZero};\n    cursor: pointer;\n  }\n`;\n","/* base */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n/* components */\n\nimport theme from 'theme/Theme';\nimport { ComponentBase, OptionRow } from './SortbyDialog.styles';\n\nconst propTypes = {\n  open: PropTypes.bool,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.string,\n      label: PropTypes.string\n    })\n  ),\n  closeDialog: PropTypes.func,\n  setWrapperRef: PropTypes.func,\n  onOptionClick: PropTypes.func,\n  selectedOptionValue: PropTypes.string\n};\nconst defaultProps = {\n  open: false,\n  options: [\n    { label: 'Option a', value: 'a' },\n    { label: 'Option b', value: 'b' },\n    { label: 'Option c', value: 'c' }\n  ],\n  closeDialog: null,\n  setWrapperRef: null,\n  onOptionClick: null,\n  selectedOptionValue: ''\n};\n\nconst SortbyDialog = ({\n  open,\n  options,\n  closeDialog,\n  setWrapperRef,\n  onOptionClick,\n  selectedOptionValue\n}) => {\n  return (\n    <React.Fragment>\n      {open && (\n        <ComponentBase onClick={closeDialog} ref={setWrapperRef}>\n          {options.map(o => {\n            const selected = selectedOptionValue === o.value;\n            return (\n              <OptionRow\n                key={o.value}\n                id={o.value}\n                onClick={onOptionClick}\n                theme={{\n                  background: selected\n                    ? theme.color.zoomGreyZero\n                    : theme.color.aidsFondsWhite\n                }}\n              >\n                {o.label}\n              </OptionRow>\n            );\n          })}\n        </ComponentBase>\n      )}\n    </React.Fragment>\n  );\n};\n\nSortbyDialog.propTypes = propTypes;\nSortbyDialog.defaultProps = defaultProps;\n\nexport default SortbyDialog;\n","import theme from 'theme/Theme';\n\nexport const IATIDetailBarChartMockData = [\n  {\n    year: '2012',\n    Budget: 17,\n    BudgetColor: theme.color.chartColorTwo,\n    Spent: 169,\n    SpentColor: theme.color.chartColorThree\n  },\n  {\n    year: '2013',\n    Budget: 125,\n    BudgetColor: theme.color.chartColorTwo,\n    Spent: 163,\n    SpentColor: theme.color.chartColorThree\n  },\n  {\n    year: '2014',\n    Budget: 135,\n    BudgetColor: theme.color.chartColorTwo,\n    Spent: 131,\n    SpentColor: theme.color.chartColorThree\n  }\n];\n\nexport const barChartMockData = [\n  {\n    indicator: 'AI',\n    Kenya: 18,\n    CountryColor: theme.color.chartColorTwo\n  },\n  {\n    indicator: 'AL',\n    Kenya: 125,\n    CountryColor: theme.color.chartColorTwo\n  },\n  {\n    indicator: 'AM',\n    Kenya: 135,\n    CountryColor: theme.color.chartColorTwo\n  }\n];\n"],"sourceRoot":""}